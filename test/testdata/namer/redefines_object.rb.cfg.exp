digraph "redefines_object.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: T.class_of(Object) = alias <C Object>\l<statTemp>$5: Sorbet::Private::Static::Void = <statTemp>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$7: T.class_of(Object))\l<statTemp>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$12: T.class_of(Trigger) = alias <C Trigger>\l<statTemp>$10: Sorbet::Private::Static::Void = <statTemp>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$12: T.class_of(Trigger))\l<statTemp>$16: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$17: T.class_of(Foo) = alias <C Foo>\l<statTemp>$15: Sorbet::Private::Static::Void = <statTemp>$16: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$17: T.class_of(Foo))\l<statTemp>$19: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$20: T.class_of(Bar) = alias <C Bar>\l<statTemp>$18: Sorbet::Private::Static::Void = <statTemp>$19: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$20: T.class_of(Bar))\l<statTemp>$24: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$25: T.class_of(Bar) = alias <C Bar>\l<statTemp>$23: Sorbet::Private::Static::Void = <statTemp>$24: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$25: T.class_of(Bar))\l<statTemp>$27: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$28: T.class_of(Foo) = alias <C Foo>\l<statTemp>$26: Sorbet::Private::Static::Void = <statTemp>$27: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$28: T.class_of(Foo))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Object>#<static-init>" {
    label = "::<Class:Object>#<static-init>";
    color = blue;
    "bb::<Class:Object>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Object>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Object>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Object) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Object>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Object>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Object>#<static-init>_0" -> "bb::<Class:Object>#<static-init>_1" [style="bold"];
    "bb::<Class:Object>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Object>#<static-init>_1" -> "bb::<Class:Object>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Trigger#trigger" {
    label = "::Trigger#trigger";
    color = blue;
    "bb::Trigger#trigger_0" [shape = invhouse];
    "bb::Trigger#trigger_1" [shape = parallelogram];

    "bb::Trigger#trigger_0" [
        label = "block[id=0, rubyBlockId=0]()\l@__fake_logger$3: T.untyped = alias <C <undeclared-field-stub>>\l<self>: Trigger = cast(<self>: NilClass, Trigger);\l<returnMethodTemp>$2: T.untyped = @__fake_logger$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Trigger#trigger_0" -> "bb::Trigger#trigger_1" [style="bold"];
    "bb::Trigger#trigger_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Trigger#trigger_1" -> "bb::Trigger#trigger_1" [style="bold"];
}

subgraph "cluster_::<Class:Trigger>#<static-init>" {
    label = "::<Class:Trigger>#<static-init>";
    color = blue;
    "bb::<Class:Trigger>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Trigger>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Trigger>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Trigger) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Trigger>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Trigger>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<returnMethodTemp>$2: Symbol(:\"trigger\") = :\"trigger\"\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:\"trigger\")\l<unconditional>\l"
    ];

    "bb::<Class:Trigger>#<static-init>_0" -> "bb::<Class:Trigger>#<static-init>_1" [style="bold"];
    "bb::<Class:Trigger>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Trigger>#<static-init>_1" -> "bb::<Class:Trigger>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Foo>#<static-init>" {
    label = "::<Class:Foo>#<static-init>";
    color = blue;
    "bb::<Class:Foo>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Foo>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Foo>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Foo) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Foo>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Foo>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Foo>#<static-init>_0" -> "bb::<Class:Foo>#<static-init>_1" [style="bold"];
    "bb::<Class:Foo>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Foo>#<static-init>_1" -> "bb::<Class:Foo>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Bar>#<static-init>" {
    label = "::<Class:Bar>#<static-init>";
    color = blue;
    "bb::<Class:Bar>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Bar>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Bar>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Bar) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Bar>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Bar>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Bar>#<static-init>_0" -> "bb::<Class:Bar>#<static-init>_1" [style="bold"];
    "bb::<Class:Bar>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Bar>#<static-init>_1" -> "bb::<Class:Bar>#<static-init>_1" [style="bold"];
}

}

