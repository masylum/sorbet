digraph "module_function.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$5: Sorbet::Private::Static::Void = <statTemp>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$7: T.class_of(Funcs))\l<statTemp>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$12: T.class_of(C) = alias <C C>\l<statTemp>$10: Sorbet::Private::Static::Void = <statTemp>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$12: T.class_of(C))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Funcs#f" {
    label = "::Funcs#f";
    color = blue;
    "bb::Funcs#f_0" [shape = invhouse];
    "bb::Funcs#f_1" [shape = parallelogram];

    "bb::Funcs#f_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\lx: Integer = load_arg(x)\l<returnMethodTemp>$2: Integer = x\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::Funcs#f_0" -> "bb::Funcs#f_1" [style="bold"];
    "bb::Funcs#f_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Funcs#f_1" -> "bb::Funcs#f_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#f" {
    label = "::<Class:Funcs>#f";
    color = blue;
    "bb::<Class:Funcs>#f_0" [shape = invhouse];
    "bb::<Class:Funcs>#f_1" [shape = parallelogram];

    "bb::<Class:Funcs>#f_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#f_0" -> "bb::<Class:Funcs>#f_1" [style="bold"];
    "bb::<Class:Funcs>#f_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#f_1" -> "bb::<Class:Funcs>#f_1" [style="bold"];
}

subgraph "cluster_::Funcs#g" {
    label = "::Funcs#g";
    color = blue;
    "bb::Funcs#g_0" [shape = invhouse];
    "bb::Funcs#g_1" [shape = parallelogram];

    "bb::Funcs#g_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\ls: Symbol = load_arg(s)\l<returnMethodTemp>$2: Symbol = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol\l<unconditional>\l"
    ];

    "bb::Funcs#g_0" -> "bb::Funcs#g_1" [style="bold"];
    "bb::Funcs#g_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Funcs#g_1" -> "bb::Funcs#g_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#g" {
    label = "::<Class:Funcs>#g";
    color = blue;
    "bb::<Class:Funcs>#g_0" [shape = invhouse];
    "bb::<Class:Funcs>#g_1" [shape = parallelogram];

    "bb::<Class:Funcs>#g_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\ls: Symbol = load_arg(s)\l<returnMethodTemp>$2: Symbol = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#g_0" -> "bb::<Class:Funcs>#g_1" [style="bold"];
    "bb::<Class:Funcs>#g_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#g_1" -> "bb::<Class:Funcs>#g_1" [style="bold"];
}

subgraph "cluster_::Funcs#h" {
    label = "::Funcs#h";
    color = blue;
    "bb::Funcs#h_0" [shape = invhouse];
    "bb::Funcs#h_1" [shape = parallelogram];

    "bb::Funcs#h_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\ls: String = load_arg(s)\l<returnMethodTemp>$2: String = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String\l<unconditional>\l"
    ];

    "bb::Funcs#h_0" -> "bb::Funcs#h_1" [style="bold"];
    "bb::Funcs#h_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Funcs#h_1" -> "bb::Funcs#h_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#h" {
    label = "::<Class:Funcs>#h";
    color = blue;
    "bb::<Class:Funcs>#h_0" [shape = invhouse];
    "bb::<Class:Funcs>#h_1" [shape = parallelogram];

    "bb::<Class:Funcs>#h_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\ls: String = load_arg(s)\l<returnMethodTemp>$2: String = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#h_0" -> "bb::<Class:Funcs>#h_1" [style="bold"];
    "bb::<Class:Funcs>#h_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#h_1" -> "bb::<Class:Funcs>#h_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#<static-init>" {
    label = "::<Class:Funcs>#<static-init>";
    color = blue;
    "bb::<Class:Funcs>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Funcs>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Funcs>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<block-pre-call-temp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$10: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_0" -> "bb::<Class:Funcs>#<static-init>_2" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_1" -> "bb::<Class:Funcs>#<static-init>_1" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(Funcs), <selfRestore>$10: T.class_of(Funcs), <block-pre-call-temp>$9: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_2" -> "bb::<Class:Funcs>#<static-init>_5" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_2" -> "bb::<Class:Funcs>#<static-init>_3" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<selfRestore>$10: T.class_of(Funcs), <block-pre-call-temp>$9: Sorbet::Private::Static::Void)\l<statTemp>$7: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$10\l<statTemp>$24: Symbol(:\"f\") = :\"f\"\l<statTemp>$22: T.class_of(Funcs) = <self>: T.class_of(Funcs).private(<statTemp>$24: Symbol(:\"f\"))\l<block-pre-call-temp>$27: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$28: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_3" -> "bb::<Class:Funcs>#<static-init>_6" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(Funcs), <selfRestore>$10: T.class_of(Funcs), <block-pre-call-temp>$9: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$17: Symbol(:\"x\") = :\"x\"\l<hashTemp>$18: T.class_of(Integer) = alias <C Integer>\l<magic>$19: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$16: {x: T.class_of(Integer)} = <magic>$19: T.class_of(<Magic>).<build-hash>(<hashTemp>$17: Symbol(:\"x\"), <hashTemp>$18: T.class_of(Integer))\l<statTemp>$14: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$16: {x: T.class_of(Integer)})\l<statTemp>$20: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$13: T::Private::Methods::DeclBuilder = <statTemp>$14: T::Private::Methods::DeclBuilder.returns(<statTemp>$20: T.class_of(Integer))\l<blockReturnTemp>$21: T.noreturn = blockreturn<sig> <blockReturnTemp>$13: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_5" -> "bb::<Class:Funcs>#<static-init>_2" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_6" [
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(Funcs), <selfRestore>$28: T.class_of(Funcs), <block-pre-call-temp>$27: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_6" -> "bb::<Class:Funcs>#<static-init>_9" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_6" -> "bb::<Class:Funcs>#<static-init>_7" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_7" [
        label = "block[id=7, rubyBlockId=0](<selfRestore>$28: T.class_of(Funcs), <block-pre-call-temp>$27: Sorbet::Private::Static::Void)\l<statTemp>$25: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$27, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$28\l<block-pre-call-temp>$42: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$43: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_7" -> "bb::<Class:Funcs>#<static-init>_10" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_9" [
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(Funcs), <selfRestore>$28: T.class_of(Funcs), <block-pre-call-temp>$27: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$35: Symbol(:\"s\") = :\"s\"\l<hashTemp>$36: T.class_of(Symbol) = alias <C Symbol>\l<magic>$37: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$34: {s: T.class_of(Symbol)} = <magic>$37: T.class_of(<Magic>).<build-hash>(<hashTemp>$35: Symbol(:\"s\"), <hashTemp>$36: T.class_of(Symbol))\l<statTemp>$32: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$34: {s: T.class_of(Symbol)})\l<statTemp>$38: T.class_of(Symbol) = alias <C Symbol>\l<blockReturnTemp>$31: T::Private::Methods::DeclBuilder = <statTemp>$32: T::Private::Methods::DeclBuilder.returns(<statTemp>$38: T.class_of(Symbol))\l<blockReturnTemp>$39: T.noreturn = blockreturn<sig> <blockReturnTemp>$31: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_9" -> "bb::<Class:Funcs>#<static-init>_6" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_10" [
        label = "block[id=10, rubyBlockId=3](<self>: T.class_of(Funcs), <selfRestore>$43: T.class_of(Funcs), <block-pre-call-temp>$42: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_10" -> "bb::<Class:Funcs>#<static-init>_13" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_10" -> "bb::<Class:Funcs>#<static-init>_11" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_11" [
        label = "block[id=11, rubyBlockId=0](<selfRestore>$43: T.class_of(Funcs), <block-pre-call-temp>$42: Sorbet::Private::Static::Void)\l<statTemp>$40: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$42, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$43\l<block-pre-call-temp>$57: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$58: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_11" -> "bb::<Class:Funcs>#<static-init>_14" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_13" [
        label = "block[id=13, rubyBlockId=3](<self>: T.class_of(Funcs), <selfRestore>$43: T.class_of(Funcs), <block-pre-call-temp>$42: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$50: Symbol(:\"s\") = :\"s\"\l<hashTemp>$51: T.class_of(Symbol) = alias <C Symbol>\l<magic>$52: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$49: {s: T.class_of(Symbol)} = <magic>$52: T.class_of(<Magic>).<build-hash>(<hashTemp>$50: Symbol(:\"s\"), <hashTemp>$51: T.class_of(Symbol))\l<statTemp>$47: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$49: {s: T.class_of(Symbol)})\l<statTemp>$53: T.class_of(Symbol) = alias <C Symbol>\l<blockReturnTemp>$46: T::Private::Methods::DeclBuilder = <statTemp>$47: T::Private::Methods::DeclBuilder.returns(<statTemp>$53: T.class_of(Symbol))\l<blockReturnTemp>$54: T.noreturn = blockreturn<sig> <blockReturnTemp>$46: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_13" -> "bb::<Class:Funcs>#<static-init>_10" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_14" [
        label = "block[id=14, rubyBlockId=4](<self>: T.class_of(Funcs), <selfRestore>$58: T.class_of(Funcs), <block-pre-call-temp>$57: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_14" -> "bb::<Class:Funcs>#<static-init>_17" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_14" -> "bb::<Class:Funcs>#<static-init>_15" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_15" [
        label = "block[id=15, rubyBlockId=0](<selfRestore>$58: T.class_of(Funcs), <block-pre-call-temp>$57: Sorbet::Private::Static::Void)\l<statTemp>$55: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$57, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$58\l<block-pre-call-temp>$72: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$73: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_15" -> "bb::<Class:Funcs>#<static-init>_18" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_17" [
        label = "block[id=17, rubyBlockId=4](<self>: T.class_of(Funcs), <selfRestore>$58: T.class_of(Funcs), <block-pre-call-temp>$57: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$65: Symbol(:\"s\") = :\"s\"\l<hashTemp>$66: T.class_of(String) = alias <C String>\l<magic>$67: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$64: {s: T.class_of(String)} = <magic>$67: T.class_of(<Magic>).<build-hash>(<hashTemp>$65: Symbol(:\"s\"), <hashTemp>$66: T.class_of(String))\l<statTemp>$62: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$64: {s: T.class_of(String)})\l<statTemp>$68: T.class_of(String) = alias <C String>\l<blockReturnTemp>$61: T::Private::Methods::DeclBuilder = <statTemp>$62: T::Private::Methods::DeclBuilder.returns(<statTemp>$68: T.class_of(String))\l<blockReturnTemp>$69: T.noreturn = blockreturn<sig> <blockReturnTemp>$61: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_17" -> "bb::<Class:Funcs>#<static-init>_14" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_18" [
        label = "block[id=18, rubyBlockId=5](<self>: T.class_of(Funcs), <selfRestore>$73: T.class_of(Funcs), <block-pre-call-temp>$72: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_18" -> "bb::<Class:Funcs>#<static-init>_21" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_18" -> "bb::<Class:Funcs>#<static-init>_19" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_19" [
        label = "block[id=19, rubyBlockId=0](<selfRestore>$73: T.class_of(Funcs), <block-pre-call-temp>$72: Sorbet::Private::Static::Void)\l<statTemp>$70: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$72, sig>\l<statTemp>$86: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$87: T.class_of(T::Sig) = alias <C Sig>\lkeep_for_ide$88: T.class_of(T) = alias <C T>\l<statTemp>$85: Sorbet::Private::Static::Void = <statTemp>$86: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$87: T.class_of(T::Sig))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_19" -> "bb::<Class:Funcs>#<static-init>_1" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_21" [
        label = "block[id=21, rubyBlockId=5](<self>: T.class_of(Funcs), <selfRestore>$73: T.class_of(Funcs), <block-pre-call-temp>$72: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$80: Symbol(:\"s\") = :\"s\"\l<hashTemp>$81: T.class_of(String) = alias <C String>\l<magic>$82: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$79: {s: T.class_of(String)} = <magic>$82: T.class_of(<Magic>).<build-hash>(<hashTemp>$80: Symbol(:\"s\"), <hashTemp>$81: T.class_of(String))\l<statTemp>$77: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$79: {s: T.class_of(String)})\l<statTemp>$83: T.class_of(String) = alias <C String>\l<blockReturnTemp>$76: T::Private::Methods::DeclBuilder = <statTemp>$77: T::Private::Methods::DeclBuilder.returns(<statTemp>$83: T.class_of(String))\l<blockReturnTemp>$84: T.noreturn = blockreturn<sig> <blockReturnTemp>$76: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_21" -> "bb::<Class:Funcs>#<static-init>_18" [style="bold"];
}

subgraph "cluster_::C#test_calls" {
    label = "::C#test_calls";
    color = blue;
    "bb::C#test_calls_0" [shape = invhouse];
    "bb::C#test_calls_1" [shape = parallelogram];

    "bb::C#test_calls_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: C = cast(<self>: NilClass, C);\l<statTemp>$5: Integer(0) = 0\l<statTemp>$3: Integer = <self>: C.f(<statTemp>$5: Integer(0))\l<statTemp>$7: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$8: Integer(0) = 0\l<statTemp>$6: T.untyped = <statTemp>$7: T.class_of(Funcs).f(<statTemp>$8: Integer(0))\l<statTemp>$11: Symbol(:\"f\") = :\"f\"\l<statTemp>$9: Symbol = <self>: C.g(<statTemp>$11: Symbol(:\"f\"))\l<statTemp>$13: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$14: Symbol(:\"f\") = :\"f\"\l<statTemp>$12: Symbol = <statTemp>$13: T.class_of(Funcs).g(<statTemp>$14: Symbol(:\"f\"))\l<statTemp>$17: String(\"hello\") = \"hello\"\l<statTemp>$15: String = <self>: C.h(<statTemp>$17: String(\"hello\"))\l<statTemp>$19: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$20: String(\"world\") = \"world\"\l<statTemp>$18: String = <statTemp>$19: T.class_of(Funcs).h(<statTemp>$20: String(\"world\"))\l<statTemp>$21: T.class_of(C) = alias <C C>\l<returnMethodTemp>$2: T.untyped = <statTemp>$21: T.class_of(C).f()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::C#test_calls_0" -> "bb::C#test_calls_1" [style="bold"];
    "bb::C#test_calls_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::C#test_calls_1" -> "bb::C#test_calls_1" [style="bold"];
}

subgraph "cluster_::<Class:C>#<static-init>" {
    label = "::<Class:C>#<static-init>";
    color = blue;
    "bb::<Class:C>#<static-init>_0" [shape = invhouse];
    "bb::<Class:C>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:C>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(C) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U C>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U C>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(Funcs))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:C>#<static-init>_0" -> "bb::<Class:C>#<static-init>_1" [style="bold"];
    "bb::<Class:C>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:C>#<static-init>_1" -> "bb::<Class:C>#<static-init>_1" [style="bold"];
}

}

