digraph "math.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(Example) = alias <C Example>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(Example))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Example>#calculate" {
    label = "::<Class:Example>#calculate";
    color = blue;
    "bb::<Class:Example>#calculate_0" [shape = invhouse];
    "bb::<Class:Example>#calculate_1" [shape = parallelogram];

    "bb::<Class:Example>#calculate_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Example) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Example>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Example>> $1><C <U <AttachedClass>>>)\l  ]\l});\lis_add: T::Boolean = load_arg(is_add)\la: Integer = load_arg(a)\lb: Integer = load_arg(b)\lis_add: T::Boolean\l"
    ];

    "bb::<Class:Example>#calculate_0" -> "bb::<Class:Example>#calculate_2" [style="bold"];
    "bb::<Class:Example>#calculate_0" -> "bb::<Class:Example>#calculate_3" [style="tapered"];

    "bb::<Class:Example>#calculate_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Example>#calculate_1" -> "bb::<Class:Example>#calculate_1" [style="bold"];
    "bb::<Class:Example>#calculate_2" [
        label = "block[id=2, rubyBlockId=0](b: Integer, a: Integer)\l<returnMethodTemp>$2: Integer = a: Integer.+(b: Integer)\l<unconditional>\l"
    ];

    "bb::<Class:Example>#calculate_2" -> "bb::<Class:Example>#calculate_4" [style="bold"];
    "bb::<Class:Example>#calculate_3" [
        label = "block[id=3, rubyBlockId=0](b: Integer, a: Integer)\l<returnMethodTemp>$2: Integer = a: Integer.-(b: Integer)\l<unconditional>\l"
    ];

    "bb::<Class:Example>#calculate_3" -> "bb::<Class:Example>#calculate_4" [style="bold"];
    "bb::<Class:Example>#calculate_4" [
        label = "block[id=4, rubyBlockId=0](<returnMethodTemp>$2: Integer)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::<Class:Example>#calculate_4" -> "bb::<Class:Example>#calculate_1" [style="bold"];
}

subgraph "cluster_::<Class:Example>#<static-init>" {
    label = "::<Class:Example>#<static-init>";
    color = blue;
    "bb::<Class:Example>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Example>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Example>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Example) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Example>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Example>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<block-pre-call-temp>$6: Sorbet::Private::Static::Void = <self>: T.class_of(Example).sig()\l<selfRestore>$7: T.class_of(Example) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Example>#<static-init>_0" -> "bb::<Class:Example>#<static-init>_2" [style="bold"];
    "bb::<Class:Example>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Example>#<static-init>_1" -> "bb::<Class:Example>#<static-init>_1" [style="bold"];
    "bb::<Class:Example>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(Example), <selfRestore>$7: T.class_of(Example), <block-pre-call-temp>$6: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Example>#<static-init>_2" -> "bb::<Class:Example>#<static-init>_5" [style="bold"];
    "bb::<Class:Example>#<static-init>_2" -> "bb::<Class:Example>#<static-init>_3" [style="tapered"];

    "bb::<Class:Example>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<selfRestore>$7: T.class_of(Example), <block-pre-call-temp>$6: Sorbet::Private::Static::Void)\l<statTemp>$4: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$6, sig>\l<statTemp>$25: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$26: T.class_of(T::Sig) = alias <C Sig>\lkeep_for_ide$27: T.class_of(T) = alias <C T>\l<statTemp>$24: Sorbet::Private::Static::Void = <statTemp>$25: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$26: T.class_of(T::Sig))\l<statTemp>$29: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$30: T.class_of(T::CFGExport) = alias <C CFGExport>\lkeep_for_ide$31: T.class_of(T) = alias <C T>\l<statTemp>$28: Sorbet::Private::Static::Void = <statTemp>$29: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$30: T.class_of(T::CFGExport))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Example>#<static-init>_3" -> "bb::<Class:Example>#<static-init>_1" [style="bold"];
    "bb::<Class:Example>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(Example), <selfRestore>$7: T.class_of(Example), <block-pre-call-temp>$6: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$14: Symbol(:\"is_add\") = :\"is_add\"\l<hashTemp>$15: <Type: T::Boolean> = alias <C Boolean>\lkeep_for_ide$16: T.class_of(T) = alias <C T>\l<hashTemp>$17: Symbol(:\"a\") = :\"a\"\l<hashTemp>$18: T.class_of(Integer) = alias <C Integer>\l<hashTemp>$19: Symbol(:\"b\") = :\"b\"\l<hashTemp>$20: T.class_of(Integer) = alias <C Integer>\l<magic>$21: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$13: {is_add: <Type: T::Boolean>, a: T.class_of(Integer), b: T.class_of(Integer)} = <magic>$21: T.class_of(<Magic>).<build-hash>(<hashTemp>$14: Symbol(:\"is_add\"), <hashTemp>$15: <Type: T::Boolean>, <hashTemp>$17: Symbol(:\"a\"), <hashTemp>$18: T.class_of(Integer), <hashTemp>$19: Symbol(:\"b\"), <hashTemp>$20: T.class_of(Integer))\l<statTemp>$11: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$13: {is_add: <Type: T::Boolean>, a: T.class_of(Integer), b: T.class_of(Integer)})\l<statTemp>$22: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <statTemp>$11: T::Private::Methods::DeclBuilder.returns(<statTemp>$22: T.class_of(Integer))\l<blockReturnTemp>$23: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Example>#<static-init>_5" -> "bb::<Class:Example>#<static-init>_2" [style="bold"];
}

}

