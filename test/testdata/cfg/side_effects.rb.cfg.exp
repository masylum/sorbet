digraph "side_effects.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(Side) = alias <C Side>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(Side))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Side#foo" {
    label = "::Side#foo";
    color = blue;
    "bb::Side#foo_0" [shape = invhouse];
    "bb::Side#foo_1" [shape = parallelogram];

    "bb::Side#foo_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Side = cast(<self>: NilClass, Side);\lcond: T.untyped = load_arg(cond)\la: Integer(1) = 1\l<statTemp>$4: Integer(1) = a\l<statTemp>$5: Integer(1) = a\lcond: T.untyped\l"
    ];

    "bb::Side#foo_0" -> "bb::Side#foo_2" [style="bold"];
    "bb::Side#foo_0" -> "bb::Side#foo_3" [style="tapered"];

    "bb::Side#foo_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Side#foo_1" -> "bb::Side#foo_1" [style="bold"];
    "bb::Side#foo_2" [
        label = "block[id=2, rubyBlockId=0](<statTemp>$4: Integer(1), <statTemp>$5: Integer(1))\la: TrueClass = true\l<unconditional>\l"
    ];

    "bb::Side#foo_2" -> "bb::Side#foo_4" [style="bold"];
    "bb::Side#foo_3" [
        label = "block[id=3, rubyBlockId=0](<statTemp>$4: Integer(1), <statTemp>$5: Integer(1))\la: Integer(2) = 2\l<unconditional>\l"
    ];

    "bb::Side#foo_3" -> "bb::Side#foo_4" [style="bold"];
    "bb::Side#foo_4" [
        label = "block[id=4, rubyBlockId=0](<statTemp>$4: Integer(1), <statTemp>$5: Integer(1), a: T.any(TrueClass, Integer))\l<returnMethodTemp>$2: T.untyped = <statTemp>$4: Integer(1).foo(<statTemp>$5: Integer(1), a: T.any(TrueClass, Integer))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Side#foo_4" -> "bb::Side#foo_1" [style="bold"];
}

subgraph "cluster_::<Class:Side>#<static-init>" {
    label = "::<Class:Side>#<static-init>";
    color = blue;
    "bb::<Class:Side>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Side>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Side>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Side) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Side>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Side>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<returnMethodTemp>$2: Symbol(:\"foo\") = :\"foo\"\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:\"foo\")\l<unconditional>\l"
    ];

    "bb::<Class:Side>#<static-init>_0" -> "bb::<Class:Side>#<static-init>_1" [style="bold"];
    "bb::<Class:Side>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Side>#<static-init>_1" -> "bb::<Class:Side>#<static-init>_1" [style="bold"];
}

}

