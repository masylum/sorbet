digraph "extra_bb_args.rb" {
subgraph "cluster_::Object#main" {
    label = "::Object#main";
    color = blue;
    "bb::Object#main_0" [shape = invhouse];
    "bb::Object#main_1" [shape = parallelogram];

    "bb::Object#main_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: T.class_of(T) = alias <C T>\l<statTemp>$8: T.class_of(String) = alias <C String>\l<statTemp>$6: <Type: T.nilable(String)> = <statTemp>$7: T.class_of(T).nilable(<statTemp>$8: T.class_of(String))\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$6: <Type: T.nilable(String)>)\l<castTemp>$9: NilClass = nil\lname: T.nilable(String) = cast(<castTemp>$9: NilClass, String | NilClass);\l<ifTemp>$11: T::Boolean = name: T.nilable(String).nil?()\l<ifTemp>$11: T::Boolean\l"
    ];

    "bb::Object#main_0" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_0" -> "bb::Object#main_3" [style="tapered"];

    "bb::Object#main_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#main_1" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$13: String(\"missing name\") = \"missing name\"\l<statTemp>$10: T.noreturn = return <returnTemp>$13: String(\"missing name\")\l<unconditional>\l"
    ];

    "bb::Object#main_2" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_3" [
        label = "block[id=3, rubyBlockId=0](name: String)\l<statTemp>$15: String(\"foo\") = \"foo\"\l<returnMethodTemp>$2: T::Boolean = name: String.include?(<statTemp>$15: String(\"foo\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T::Boolean\l<unconditional>\l"
    ];

    "bb::Object#main_3" -> "bb::Object#main_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<returnMethodTemp>$2: Symbol(:\"main\") = :\"main\"\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:\"main\")\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

