digraph "simple.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(ControlFlow) = alias <C ControlFlow>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(ControlFlow))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0" {
    label = "::ControlFlow#orZero0";
    color = blue;
    "bb::ControlFlow#orZero0_0" [shape = invhouse];
    "bb::ControlFlow#orZero0_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_2" [style="bold"];
    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_3" [style="tapered"];

    "bb::ControlFlow#orZero0_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_1" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_2" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_3" [
        label = "block[id=3, rubyBlockId=0]()\l<returnTemp>$5: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$5: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_3" -> "bb::ControlFlow#orZero0_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0a" {
    label = "::ControlFlow#orZero0a";
    color = blue;
    "bb::ControlFlow#orZero0a_0" [shape = invhouse];
    "bb::ControlFlow#orZero0a_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0a_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: Integer = load_arg(a)\la: Integer\l"
    ];

    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_2" [style="bold"];
    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_3" [style="tapered"];

    "bb::ControlFlow#orZero0a_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_1" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_2" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_3" [
        label = "block[id=3, rubyBlockId=0]()\l<returnTemp>$5 = 0\l<returnMethodTemp>$2 = return <returnTemp>$5\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_3" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0n" {
    label = "::ControlFlow#orZero0n";
    color = blue;
    "bb::ControlFlow#orZero0n_0" [shape = invhouse];
    "bb::ControlFlow#orZero0n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\lb: T::Boolean = a: T.nilable(Integer).!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_2" [style="bold"];
    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_3" [style="tapered"];

    "bb::ControlFlow#orZero0n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_1" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_2" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_3" [
        label = "block[id=3, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_3" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero1n" {
    label = "::ControlFlow#orZero1n";
    color = blue;
    "bb::ControlFlow#orZero1n_0" [shape = invhouse];
    "bb::ControlFlow#orZero1n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero1n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\l<statTemp>$6: T.class_of(Integer) = alias <C Integer>\l<statTemp>$4: T::Boolean = a: T.nilable(Integer).is_a?(<statTemp>$6: T.class_of(Integer))\lb: T::Boolean = <statTemp>$4: T::Boolean.!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_2" [style="bold"];
    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_3" [style="tapered"];

    "bb::ControlFlow#orZero1n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_1" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$8: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_2" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_3" [
        label = "block[id=3, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_3" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero2" {
    label = "::ControlFlow#orZero2";
    color = blue;
    "bb::ControlFlow#orZero2_0" [shape = invhouse];
    "bb::ControlFlow#orZero2_1" [shape = parallelogram];

    "bb::ControlFlow#orZero2_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_3" [style="tapered"];

    "bb::ControlFlow#orZero2_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_1" -> "bb::ControlFlow#orZero2_1" [style="bold"];
    "bb::ControlFlow#orZero2_3" [
        label = "block[id=3, rubyBlockId=0]()\la: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_3" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_4" [
        label = "block[id=4, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: Integer = a\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_4" -> "bb::ControlFlow#orZero2_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3" {
    label = "::ControlFlow#orZero3";
    color = blue;
    "bb::ControlFlow#orZero3_0" [shape = invhouse];
    "bb::ControlFlow#orZero3_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_2" [style="bold"];
    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_3" [style="tapered"];

    "bb::ControlFlow#orZero3_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_1" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_2" [
        label = "block[id=2, rubyBlockId=0]()\l<statTemp>$5: Integer(1) = 1\l<statTemp>$6: Integer(2) = 2\l<ifTemp>$3: T::Boolean = <statTemp>$5: Integer(1).==(<statTemp>$6: Integer(2))\l<ifTemp>$3: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: NilClass = a\l<ifTemp>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_5" [
        label = "block[id=5, rubyBlockId=0]()\l<returnTemp>$7: Integer(1) = 1\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$7: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_5" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$8: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_6" -> "bb::ControlFlow#orZero3_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3n" {
    label = "::ControlFlow#orZero3n";
    color = blue;
    "bb::ControlFlow#orZero3n_0" [shape = invhouse];
    "bb::ControlFlow#orZero3n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_2" [style="bold"];
    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_3" [style="tapered"];

    "bb::ControlFlow#orZero3n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_1" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<statTemp>$6: Integer(1) = 1\l<statTemp>$7: Integer(2) = 2\l<statTemp>$4: T::Boolean = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_2" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<statTemp>$4: NilClass = a\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_3" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_4" [
        label = "block[id=4, rubyBlockId=0](<statTemp>$4: T.nilable(T::Boolean))\lb: T::Boolean = <statTemp>$4: T.nilable(T::Boolean).!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_5" [style="bold"];
    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_6" [style="tapered"];

    "bb::ControlFlow#orZero3n_5" [
        label = "block[id=5, rubyBlockId=0]()\l<returnTemp>$9: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_5" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$10: Integer(1) = 1\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$10: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_6" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero4" {
    label = "::ControlFlow#orZero4";
    color = blue;
    "bb::ControlFlow#orZero4_0" [shape = invhouse];
    "bb::ControlFlow#orZero4_1" [shape = parallelogram];

    "bb::ControlFlow#orZero4_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_2" [style="bold"];
    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_3" [style="tapered"];

    "bb::ControlFlow#orZero4_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_1" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<ifTemp>$3: Integer = a\l<ifTemp>$3: Integer\l"
    ];

    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: TrueClass = true\l<ifTemp>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_5" [
        label = "block[id=5, rubyBlockId=0](a: T.nilable(Integer))\l<returnMethodTemp>$2: T.noreturn = return a: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_5" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$6 = 0\l<returnMethodTemp>$2 = return <returnTemp>$6\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_6" -> "bb::ControlFlow#orZero4_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero5" {
    label = "::ControlFlow#orZero5";
    color = blue;
    "bb::ControlFlow#orZero5_0" [shape = invhouse];
    "bb::ControlFlow#orZero5_1" [shape = parallelogram];

    "bb::ControlFlow#orZero5_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_2" [style="bold"];
    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_3" [style="tapered"];

    "bb::ControlFlow#orZero5_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_1" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<ifTemp>$3: TrueClass = true\l<ifTemp>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: NilClass = a\l<ifTemp>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_5" [
        label = "block[id=5, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_5" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_6" -> "bb::ControlFlow#orZero5_1" [style="bold"];
}

subgraph "cluster_::<Class:ControlFlow>#<static-init>" {
    label = "::<Class:ControlFlow>#<static-init>";
    color = blue;
    "bb::<Class:ControlFlow>#<static-init>_0" [shape = invhouse];
    "bb::<Class:ControlFlow>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:ControlFlow>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(ControlFlow) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U ControlFlow>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U ControlFlow>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<block-pre-call-temp>$14: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$15: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_0" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_1" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(ControlFlow), <selfRestore>$15: T.class_of(ControlFlow), <block-pre-call-temp>$14: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_5" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_3" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<selfRestore>$15: T.class_of(ControlFlow), <block-pre-call-temp>$14: Sorbet::Private::Static::Void)\l<statTemp>$12: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$14, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$15\l<block-pre-call-temp>$32: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$33: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_3" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(ControlFlow), <selfRestore>$15: T.class_of(ControlFlow), <block-pre-call-temp>$14: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$22: Symbol(:\"a\") = :\"a\"\l<statTemp>$24: T.class_of(T) = alias <C T>\l<statTemp>$25: T.class_of(Integer) = alias <C Integer>\l<statTemp>$26: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$23: <Type: T.nilable(Integer)> = <statTemp>$24: T.class_of(T).any(<statTemp>$25: T.class_of(Integer), <statTemp>$26: T.class_of(NilClass))\l<magic>$27: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$21: {a: <Type: T.nilable(Integer)>} = <magic>$27: T.class_of(<Magic>).<build-hash>(<hashTemp>$22: Symbol(:\"a\"), <hashTemp>$23: <Type: T.nilable(Integer)>)\l<statTemp>$19: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$21: {a: <Type: T.nilable(Integer)>})\l<statTemp>$28: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$18: T::Private::Methods::DeclBuilder = <statTemp>$19: T::Private::Methods::DeclBuilder.returns(<statTemp>$28: T.class_of(Integer))\l<blockReturnTemp>$29: T.noreturn = blockreturn<sig> <blockReturnTemp>$18: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_5" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" [
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(ControlFlow), <selfRestore>$33: T.class_of(ControlFlow), <block-pre-call-temp>$32: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_9" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_7" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_7" [
        label = "block[id=7, rubyBlockId=0](<selfRestore>$33: T.class_of(ControlFlow), <block-pre-call-temp>$32: Sorbet::Private::Static::Void)\l<statTemp>$30: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$32, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$33\l<block-pre-call-temp>$47: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$48: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_7" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_9" [
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(ControlFlow), <selfRestore>$33: T.class_of(ControlFlow), <block-pre-call-temp>$32: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$40: Symbol(:\"a\") = :\"a\"\l<hashTemp>$41: T.class_of(Integer) = alias <C Integer>\l<magic>$42: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$39: {a: T.class_of(Integer)} = <magic>$42: T.class_of(<Magic>).<build-hash>(<hashTemp>$40: Symbol(:\"a\"), <hashTemp>$41: T.class_of(Integer))\l<statTemp>$37: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$39: {a: T.class_of(Integer)})\l<statTemp>$43: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$36: T::Private::Methods::DeclBuilder = <statTemp>$37: T::Private::Methods::DeclBuilder.returns(<statTemp>$43: T.class_of(Integer))\l<blockReturnTemp>$44: T.noreturn = blockreturn<sig> <blockReturnTemp>$36: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_9" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" [
        label = "block[id=10, rubyBlockId=3](<self>: T.class_of(ControlFlow), <selfRestore>$48: T.class_of(ControlFlow), <block-pre-call-temp>$47: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_13" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_11" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_11" [
        label = "block[id=11, rubyBlockId=0](<selfRestore>$48: T.class_of(ControlFlow), <block-pre-call-temp>$47: Sorbet::Private::Static::Void)\l<statTemp>$45: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$47, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$48\l<block-pre-call-temp>$65: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$66: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_11" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_13" [
        label = "block[id=13, rubyBlockId=3](<self>: T.class_of(ControlFlow), <selfRestore>$48: T.class_of(ControlFlow), <block-pre-call-temp>$47: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$55: Symbol(:\"a\") = :\"a\"\l<statTemp>$57: T.class_of(T) = alias <C T>\l<statTemp>$58: T.class_of(Integer) = alias <C Integer>\l<statTemp>$59: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$56: <Type: T.nilable(Integer)> = <statTemp>$57: T.class_of(T).any(<statTemp>$58: T.class_of(Integer), <statTemp>$59: T.class_of(NilClass))\l<magic>$60: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$54: {a: <Type: T.nilable(Integer)>} = <magic>$60: T.class_of(<Magic>).<build-hash>(<hashTemp>$55: Symbol(:\"a\"), <hashTemp>$56: <Type: T.nilable(Integer)>)\l<statTemp>$52: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$54: {a: <Type: T.nilable(Integer)>})\l<statTemp>$61: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$51: T::Private::Methods::DeclBuilder = <statTemp>$52: T::Private::Methods::DeclBuilder.returns(<statTemp>$61: T.class_of(Integer))\l<blockReturnTemp>$62: T.noreturn = blockreturn<sig> <blockReturnTemp>$51: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_13" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" [
        label = "block[id=14, rubyBlockId=4](<self>: T.class_of(ControlFlow), <selfRestore>$66: T.class_of(ControlFlow), <block-pre-call-temp>$65: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_17" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_15" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_15" [
        label = "block[id=15, rubyBlockId=0](<selfRestore>$66: T.class_of(ControlFlow), <block-pre-call-temp>$65: Sorbet::Private::Static::Void)\l<statTemp>$63: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$65, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$66\l<block-pre-call-temp>$83: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$84: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_15" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_17" [
        label = "block[id=17, rubyBlockId=4](<self>: T.class_of(ControlFlow), <selfRestore>$66: T.class_of(ControlFlow), <block-pre-call-temp>$65: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$73: Symbol(:\"a\") = :\"a\"\l<statTemp>$75: T.class_of(T) = alias <C T>\l<statTemp>$76: T.class_of(Integer) = alias <C Integer>\l<statTemp>$77: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$74: <Type: T.nilable(Integer)> = <statTemp>$75: T.class_of(T).any(<statTemp>$76: T.class_of(Integer), <statTemp>$77: T.class_of(NilClass))\l<magic>$78: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$72: {a: <Type: T.nilable(Integer)>} = <magic>$78: T.class_of(<Magic>).<build-hash>(<hashTemp>$73: Symbol(:\"a\"), <hashTemp>$74: <Type: T.nilable(Integer)>)\l<statTemp>$70: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$72: {a: <Type: T.nilable(Integer)>})\l<statTemp>$79: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$69: T::Private::Methods::DeclBuilder = <statTemp>$70: T::Private::Methods::DeclBuilder.returns(<statTemp>$79: T.class_of(Integer))\l<blockReturnTemp>$80: T.noreturn = blockreturn<sig> <blockReturnTemp>$69: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_17" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" [
        label = "block[id=18, rubyBlockId=5](<self>: T.class_of(ControlFlow), <selfRestore>$84: T.class_of(ControlFlow), <block-pre-call-temp>$83: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_21" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_19" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_19" [
        label = "block[id=19, rubyBlockId=0](<selfRestore>$84: T.class_of(ControlFlow), <block-pre-call-temp>$83: Sorbet::Private::Static::Void)\l<statTemp>$81: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$83, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$84\l<block-pre-call-temp>$101: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$102: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_19" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_21" [
        label = "block[id=21, rubyBlockId=5](<self>: T.class_of(ControlFlow), <selfRestore>$84: T.class_of(ControlFlow), <block-pre-call-temp>$83: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$91: Symbol(:\"a\") = :\"a\"\l<statTemp>$93: T.class_of(T) = alias <C T>\l<statTemp>$94: T.class_of(Integer) = alias <C Integer>\l<statTemp>$95: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$92: <Type: T.nilable(Integer)> = <statTemp>$93: T.class_of(T).any(<statTemp>$94: T.class_of(Integer), <statTemp>$95: T.class_of(NilClass))\l<magic>$96: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$90: {a: <Type: T.nilable(Integer)>} = <magic>$96: T.class_of(<Magic>).<build-hash>(<hashTemp>$91: Symbol(:\"a\"), <hashTemp>$92: <Type: T.nilable(Integer)>)\l<statTemp>$88: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$90: {a: <Type: T.nilable(Integer)>})\l<statTemp>$97: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$87: T::Private::Methods::DeclBuilder = <statTemp>$88: T::Private::Methods::DeclBuilder.returns(<statTemp>$97: T.class_of(Integer))\l<blockReturnTemp>$98: T.noreturn = blockreturn<sig> <blockReturnTemp>$87: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_21" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" [
        label = "block[id=22, rubyBlockId=6](<self>: T.class_of(ControlFlow), <selfRestore>$102: T.class_of(ControlFlow), <block-pre-call-temp>$101: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_25" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_23" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_23" [
        label = "block[id=23, rubyBlockId=0](<selfRestore>$102: T.class_of(ControlFlow), <block-pre-call-temp>$101: Sorbet::Private::Static::Void)\l<statTemp>$99: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$101, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$102\l<block-pre-call-temp>$119: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$120: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_23" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_25" [
        label = "block[id=25, rubyBlockId=6](<self>: T.class_of(ControlFlow), <selfRestore>$102: T.class_of(ControlFlow), <block-pre-call-temp>$101: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$109: Symbol(:\"a\") = :\"a\"\l<statTemp>$111: T.class_of(T) = alias <C T>\l<statTemp>$112: T.class_of(Integer) = alias <C Integer>\l<statTemp>$113: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$110: <Type: T.nilable(Integer)> = <statTemp>$111: T.class_of(T).any(<statTemp>$112: T.class_of(Integer), <statTemp>$113: T.class_of(NilClass))\l<magic>$114: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$108: {a: <Type: T.nilable(Integer)>} = <magic>$114: T.class_of(<Magic>).<build-hash>(<hashTemp>$109: Symbol(:\"a\"), <hashTemp>$110: <Type: T.nilable(Integer)>)\l<statTemp>$106: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$108: {a: <Type: T.nilable(Integer)>})\l<statTemp>$115: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$105: T::Private::Methods::DeclBuilder = <statTemp>$106: T::Private::Methods::DeclBuilder.returns(<statTemp>$115: T.class_of(Integer))\l<blockReturnTemp>$116: T.noreturn = blockreturn<sig> <blockReturnTemp>$105: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_25" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" [
        label = "block[id=26, rubyBlockId=7](<self>: T.class_of(ControlFlow), <selfRestore>$120: T.class_of(ControlFlow), <block-pre-call-temp>$119: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_29" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_27" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_27" [
        label = "block[id=27, rubyBlockId=0](<selfRestore>$120: T.class_of(ControlFlow), <block-pre-call-temp>$119: Sorbet::Private::Static::Void)\l<statTemp>$117: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$119, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$120\l<block-pre-call-temp>$137: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$138: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_27" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_29" [
        label = "block[id=29, rubyBlockId=7](<self>: T.class_of(ControlFlow), <selfRestore>$120: T.class_of(ControlFlow), <block-pre-call-temp>$119: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$127: Symbol(:\"a\") = :\"a\"\l<statTemp>$129: T.class_of(T) = alias <C T>\l<statTemp>$130: T.class_of(Integer) = alias <C Integer>\l<statTemp>$131: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$128: <Type: T.nilable(Integer)> = <statTemp>$129: T.class_of(T).any(<statTemp>$130: T.class_of(Integer), <statTemp>$131: T.class_of(NilClass))\l<magic>$132: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$126: {a: <Type: T.nilable(Integer)>} = <magic>$132: T.class_of(<Magic>).<build-hash>(<hashTemp>$127: Symbol(:\"a\"), <hashTemp>$128: <Type: T.nilable(Integer)>)\l<statTemp>$124: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$126: {a: <Type: T.nilable(Integer)>})\l<statTemp>$133: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$123: T::Private::Methods::DeclBuilder = <statTemp>$124: T::Private::Methods::DeclBuilder.returns(<statTemp>$133: T.class_of(Integer))\l<blockReturnTemp>$134: T.noreturn = blockreturn<sig> <blockReturnTemp>$123: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_29" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" [
        label = "block[id=30, rubyBlockId=8](<self>: T.class_of(ControlFlow), <selfRestore>$138: T.class_of(ControlFlow), <block-pre-call-temp>$137: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_33" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_31" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_31" [
        label = "block[id=31, rubyBlockId=0](<selfRestore>$138: T.class_of(ControlFlow), <block-pre-call-temp>$137: Sorbet::Private::Static::Void)\l<statTemp>$135: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$137, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$138\l<block-pre-call-temp>$155: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$156: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_31" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_33" [
        label = "block[id=33, rubyBlockId=8](<self>: T.class_of(ControlFlow), <selfRestore>$138: T.class_of(ControlFlow), <block-pre-call-temp>$137: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$145: Symbol(:\"a\") = :\"a\"\l<statTemp>$147: T.class_of(T) = alias <C T>\l<statTemp>$148: T.class_of(Integer) = alias <C Integer>\l<statTemp>$149: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$146: <Type: T.nilable(Integer)> = <statTemp>$147: T.class_of(T).any(<statTemp>$148: T.class_of(Integer), <statTemp>$149: T.class_of(NilClass))\l<magic>$150: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$144: {a: <Type: T.nilable(Integer)>} = <magic>$150: T.class_of(<Magic>).<build-hash>(<hashTemp>$145: Symbol(:\"a\"), <hashTemp>$146: <Type: T.nilable(Integer)>)\l<statTemp>$142: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$144: {a: <Type: T.nilable(Integer)>})\l<statTemp>$151: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$141: T::Private::Methods::DeclBuilder = <statTemp>$142: T::Private::Methods::DeclBuilder.returns(<statTemp>$151: T.class_of(Integer))\l<blockReturnTemp>$152: T.noreturn = blockreturn<sig> <blockReturnTemp>$141: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_33" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" [
        label = "block[id=34, rubyBlockId=9](<self>: T.class_of(ControlFlow), <selfRestore>$156: T.class_of(ControlFlow), <block-pre-call-temp>$155: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_37" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_35" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_35" [
        label = "block[id=35, rubyBlockId=0](<selfRestore>$156: T.class_of(ControlFlow), <block-pre-call-temp>$155: Sorbet::Private::Static::Void)\l<statTemp>$153: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$155, sig>\l<statTemp>$172: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$173: T.class_of(T::Sig) = alias <C Sig>\lkeep_for_ide$174: T.class_of(T) = alias <C T>\l<statTemp>$171: Sorbet::Private::Static::Void = <statTemp>$172: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$173: T.class_of(T::Sig))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_35" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_37" [
        label = "block[id=37, rubyBlockId=9](<self>: T.class_of(ControlFlow), <selfRestore>$156: T.class_of(ControlFlow), <block-pre-call-temp>$155: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$163: Symbol(:\"a\") = :\"a\"\l<statTemp>$165: T.class_of(T) = alias <C T>\l<statTemp>$166: T.class_of(Integer) = alias <C Integer>\l<statTemp>$167: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$164: <Type: T.nilable(Integer)> = <statTemp>$165: T.class_of(T).any(<statTemp>$166: T.class_of(Integer), <statTemp>$167: T.class_of(NilClass))\l<magic>$168: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$162: {a: <Type: T.nilable(Integer)>} = <magic>$168: T.class_of(<Magic>).<build-hash>(<hashTemp>$163: Symbol(:\"a\"), <hashTemp>$164: <Type: T.nilable(Integer)>)\l<statTemp>$160: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$162: {a: <Type: T.nilable(Integer)>})\l<statTemp>$169: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$159: T::Private::Methods::DeclBuilder = <statTemp>$160: T::Private::Methods::DeclBuilder.returns(<statTemp>$169: T.class_of(Integer))\l<blockReturnTemp>$170: T.noreturn = blockreturn<sig> <blockReturnTemp>$159: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_37" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
}

}

