class <emptyTree><<C <root>>> < ()
  class <emptyTree>::<C Other><<C <todo sym>>> < (::<todo sym>)  end

  class <emptyTree>::<C SomeDataInterface><<C <todo sym>>> < (::<todo sym>)
    :"foo"

    :"foo="

    :"foo_"

    :"foo_!"

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C String>)
    end

    def foo<<C <todo sym>>>(&<blk>)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<C String>)
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"arg0" => <emptyTree>::<C String>}).returns(<emptyTree>::<C String>)
    end

    def foo=<<C <todo sym>>>(arg0, &<blk>)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<C String>)
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"opts" => ::T.untyped()}).returns(::T.nilable(<emptyTree>::<C Other>))
    end

    def foo_<<C <todo sym>>>(*opts:, &<blk>)
      ::T.unsafe(nil)
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"opts" => ::T.untyped()}).returns(<emptyTree>::<C Other>)
    end

    def foo_!<<C <todo sym>>>(*opts:, &<blk>)
      ::T.unsafe(nil)
    end
  end

  :"test"

  def test<<C <todo sym>>>(&<blk>)
    begin
      di = <emptyTree>::<C SomeDataInterface>.new()
      <emptyTree>::<C T>.reveal_type(di.foo())
      <emptyTree>::<C T>.reveal_type(di.foo_())
      <emptyTree>::<C T>.reveal_type(di.foo_!())
    end
  end
end
