class <emptyTree><<C <root>>> < ()
  <self>.require_relative("../../t")

  module <emptyTree>::<C Foo><<C <todo sym>>> < ()
    class <emptyTree>::<C Struct><<C <todo sym>>> < (::<todo sym>)    end
  end

  class <emptyTree>::<C NotStruct><<C <todo sym>>> < (::<todo sym>)
    <emptyTree>::<C B> = <emptyTree>::<C T>.let(<emptyTree>::<C Foo>::<C Struct>.new(), <emptyTree>::<C Foo>::<C Struct>)

    var = <emptyTree>::<C Struct>.new(:"foo")
  end

  class <emptyTree>::<C RealStruct><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C A><<C <todo sym>>> < (::<root>::<C Struct>)
      :"foo"

      :"foo="

      :"bar"

      :"bar="

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      :"initialize"

      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def foo=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      def bar<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def bar=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({:"foo" => ::BasicObject, :"bar" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo = nil, bar = nil, &<blk>)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<C A>)
      end
    end

    class <emptyTree>::<C KeywordInit><<C <todo sym>>> < (::<root>::<C Struct>)
      :"foo"

      :"foo="

      :"bar"

      :"bar="

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      :"initialize"

      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def foo=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      def bar<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def bar=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({:"foo" => ::BasicObject, :"bar" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo: = nil, bar: = nil, &<blk>)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<C KeywordInit>)
      end
    end
  end

  class <emptyTree>::<C RealStructDesugar><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C A><<C <todo sym>>> < (<emptyTree>::<C Struct>)
      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      :"foo"

      :"bar"

      :"foo="

      :"bar="

      :"new"

      :"new<defaultArg>1"

      :"new<defaultArg>2"

      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def bar<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def foo=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      def bar=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      <self>.sig() do ||
        <self>.params({:"foo" => <emptyTree>::<C BasicObject>, :"bar" => <emptyTree>::<C BasicObject>}).returns(<emptyTree>::<C A>)
      end

      def self.new<<C <todo sym>>>(foo = <emptyTree>, bar = <emptyTree>, &<blk>)
        <emptyTree>::<C T>.cast(nil, <emptyTree>::<C A>)
      end

      <self>.sig() do ||
        <self>.params({:"foo" => <emptyTree>::<C BasicObject>, :"bar" => <emptyTree>::<C BasicObject>}).returns(<emptyTree>::<C BasicObject>)
      end

      def self.new<defaultArg>1<<C <todo sym>>>(foo = <emptyTree>, bar = <emptyTree>, &<blk>)
        nil
      end

      <self>.sig() do ||
        <self>.params({:"foo" => <emptyTree>::<C BasicObject>, :"bar" => <emptyTree>::<C BasicObject>}).returns(<emptyTree>::<C BasicObject>)
      end

      def self.new<defaultArg>2<<C <todo sym>>>(foo = <emptyTree>, bar = <emptyTree>, &<blk>)
        nil
      end
    end
  end

  class <emptyTree>::<C TwoStructs><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C A><<C <todo sym>>> < (::<root>::<C Struct>)
      :"foo"

      :"foo="

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      :"initialize"

      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def foo=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({:"foo" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo = nil, &<blk>)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<C A>)
      end
    end

    class <emptyTree>::<C B><<C <todo sym>>> < (::<root>::<C Struct>)
      :"foo"

      :"foo="

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      :"initialize"

      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def foo=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({:"foo" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo = nil, &<blk>)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<C B>)
      end
    end
  end

  class <emptyTree>::<C AccidentallyStruct><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C Struct><<C <todo sym>>> < (::<todo sym>)    end

    class <emptyTree>::<C A><<C <todo sym>>> < (::<root>::<C Struct>)
      :"foo"

      :"foo="

      :"bar"

      :"bar="

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      :"initialize"

      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def foo=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      def bar<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def bar=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({:"foo" => ::BasicObject, :"bar" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo = nil, bar = nil, &<blk>)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<C A>)
      end
    end
  end

  class <emptyTree>::<C MixinStruct><<C <todo sym>>> < (::<todo sym>)
    module <emptyTree>::<C MyMixin><<C <todo sym>>> < ()
      :"foo"

      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end
    end

    class <emptyTree>::<C MyStruct><<C <todo sym>>> < (::<root>::<C Struct>)
      :"x"

      :"x="

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      <self>.include(<emptyTree>::<C MyMixin>)

      <self>.new().x()

      <self>.new().foo()

      :"initialize"

      def x<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def x=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({:"x" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(x = nil, &<blk>)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<C MyStruct>)
      end
    end

    class <emptyTree>::<C MyKeywordInitStruct><<C <todo sym>>> < (::<root>::<C Struct>)
      :"x"

      :"x="

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      <self>.include(<emptyTree>::<C MyMixin>)

      <self>.new().x()

      <self>.new().foo()

      <self>.new(1, 2)

      <self>.new({:"giberish" => 1})

      :"initialize"

      def x<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def x=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({:"x" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(x: = nil, &<blk>)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<C MyKeywordInitStruct>)
      end
    end

    <emptyTree>::<C MyKeywordInitStruct>.new(1, 2)

    <emptyTree>::<C MyKeywordInitStruct>.new({:"giberish" => 1})

    <emptyTree>::<C MyStruct>.new().x()

    <emptyTree>::<C MyStruct>.new().foo()
  end

  class <emptyTree>::<C BadUsages><<C <todo sym>>> < (::<todo sym>)
    <emptyTree>::<C A> = <emptyTree>::<C Struct>.new()

    <emptyTree>::<C B> = <emptyTree>::<C Struct>.new({:"giberish" => 1})

    <emptyTree>::<C C> = <emptyTree>::<C Struct>.new({:"keyword_init" => true})

    local = true

    <emptyTree>::<C D> = <emptyTree>::<C Struct>.new({:"keyword_init" => local})

    <emptyTree>::<C E> = <emptyTree>::<C Struct>.new(:"a", {:"keyword_init" => local})
  end

  class <emptyTree>::<C Main><<C <todo sym>>> < (::<todo sym>)
    :"main"

    def main<<C <todo sym>>>(&<blk>)
      begin
        a = <emptyTree>::<C Struct>.new(:"foo")
        <emptyTree>::<C T>.assert_type!(a, <emptyTree>::<C Struct>)
        <emptyTree>::<C T>.assert_type!(a.new(), <emptyTree>::<C Struct>)
        <emptyTree>::<C T>.assert_type!(a.new(2), <emptyTree>::<C Struct>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C A>.new(2, 3), <emptyTree>::<C RealStruct>::<C A>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C A>.new(2), <emptyTree>::<C RealStruct>::<C A>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C KeywordInit>.new(), <emptyTree>::<C RealStruct>::<C KeywordInit>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C KeywordInit>.new({:"foo" => 1}), <emptyTree>::<C RealStruct>::<C KeywordInit>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C KeywordInit>.new({:"foo" => 2, :"bar" => 3}), <emptyTree>::<C RealStruct>::<C KeywordInit>)
        <emptyTree>::<C RealStruct>::<C KeywordInit>.new(1, 2)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStructDesugar>::<C A>.new(2, 3), <emptyTree>::<C RealStructDesugar>::<C A>)
      end
    end
  end

  <self>.puts(<emptyTree>::<C Main>.new().main())
end
