ClassDef{
  kind = class
  name = EmptyTree<<C <U <root>>>>
  ancestors = []
  rhs = [
    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U NotAODM>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        Literal{ value = :"prop" }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          args = [
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          args = [
            Literal{ value = :"foo" }
            Literal{ value = :"not_a_string" }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          args = [
            Literal{ value = "not_a_symbol" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          args = [
            Literal{ value = :"foo" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = "not_a_hash" }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          args = [
            Literal{ value = "too" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Hash{
              pairs = [
              ]
            }
            Literal{ value = "many" }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          args = [
            Literal{ value = :"company_name" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :"nonempty_string" }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          args = [
            Literal{ value = :"day" }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U IntegerParam>>
              }
              fun = <U new>
              block = nullptr
              args = [
                Hash{
                  pairs = [
                    [
                      key = Literal{ value = :"min" }
                      value = Literal{ value = 1 }
                    ]
                    [
                      key = Literal{ value = :"max" }
                      value = Literal{ value = 31 }
                    ]
                  ]
                }
              ]
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          args = [
            Literal{ value = :"name" }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U StringParam>>
              }
              fun = <U alphanumeric>
              block = nullptr
              args = [
              ]
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          args = [
            Literal{ value = :"how_many" }
            Send{
              recv = UnresolvedConstantLit{
                scope = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U Opus>>
                  }
                  cnst = <C <U Param>>
                }
                cnst = <C <U CaseParam>>
              }
              fun = <U new>
              block = nullptr
              args = [
                Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U how_many_cases>
                  block = nullptr
                  args = [
                  ]
                }
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U Opus>>
                      }
                      cnst = <C <U Param>>
                    }
                    cnst = <C <U ParamSpecsParam>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Default>>
                    }
                  ]
                }
              ]
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          args = [
            Literal{ value = :"optional_param" }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U IntegerParam>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
          ]
        }

        MethodDef{
          flags = self
          name = <U prop><<C <U <todo sym>>>>
          args = [RestArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U args>
            } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = EmptyTree
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U SomeODM>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U extend>
          block = nullptr
          args = [
            UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              cnst = <C <U Sig>>
            }
          ]
        }

        Literal{ value = :"foo" }

        Literal{ value = :"foo=" }

        Literal{ value = :"foo2" }

        Literal{ value = :"foo2=" }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foo><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foo=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = 0
          name = <U foo2><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = 0
          name = <U foo2=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U cast>
            block = nullptr
            args = [
              Literal{ value = nil }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U ForeignClass>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U AdvancedODM>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        Literal{ value = :"default" }

        Literal{ value = :"default=" }

        Literal{ value = :"t_nilable" }

        Literal{ value = :"t_nilable=" }

        Literal{ value = :"type" }

        Literal{ value = :"type=" }

        Literal{ value = :"object" }

        Literal{ value = :"object=" }

        Literal{ value = :"array" }

        Literal{ value = :"array=" }

        ClassDef{
          kind = class
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <C <U Mutator>>
          }<<C <U <todo sym>>>>
          ancestors = []
          rhs = [
            Literal{ value = :"array=" }

            Literal{ value = :"array" }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Local{
                      localVariable = <U <self>>
                    }
                    fun = <U params>
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U Array>>
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Array>>
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U array=><<C <U <todo sym>>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }, BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U Array>>
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                }
                                cnst = <C <U Chalk>>
                              }
                              cnst = <C <U ODM>>
                            }
                            cnst = <C <U Mutator>>
                          }
                          cnst = <C <U Private>>
                        }
                        cnst = <C <U ArrayMutator>>
                      }
                      fun = <U []>
                      block = nullptr
                      args = [
                        Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U array><<C <U <todo sym>>>>
              args = [BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                              }
                              cnst = <C <U Chalk>>
                            }
                            cnst = <C <U ODM>>
                          }
                          cnst = <C <U Mutator>>
                        }
                        cnst = <C <U Private>>
                      }
                      cnst = <C <U ArrayMutator>>
                    }
                    fun = <U []>
                    block = nullptr
                    args = [
                      Send{
                        recv = ConstantLit{
                          orig = nullptr
                          symbol = ::T
                        }
                        fun = <U untyped>
                        block = nullptr
                        args = [
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Literal{ value = :"array_of" }

        Literal{ value = :"array_of=" }

        Literal{ value = :"array_of_explicit" }

        Literal{ value = :"array_of_explicit=" }

        ClassDef{
          kind = class
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <C <U Mutator>>
          }<<C <U <todo sym>>>>
          ancestors = []
          rhs = [
            Literal{ value = :"array_of_explicit=" }

            Literal{ value = :"array_of_explicit" }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Local{
                      localVariable = <U <self>>
                    }
                    fun = <U params>
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U Array>>
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Array>>
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U array_of_explicit=><<C <U <todo sym>>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }, BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U Array>>
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                }
                                cnst = <C <U Chalk>>
                              }
                              cnst = <C <U ODM>>
                            }
                            cnst = <C <U Mutator>>
                          }
                          cnst = <C <U Private>>
                        }
                        cnst = <C <U ArrayMutator>>
                      }
                      fun = <U []>
                      block = nullptr
                      args = [
                        Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U array_of_explicit><<C <U <todo sym>>>>
              args = [BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                              }
                              cnst = <C <U Chalk>>
                            }
                            cnst = <C <U ODM>>
                          }
                          cnst = <C <U Mutator>>
                        }
                        cnst = <C <U Private>>
                      }
                      cnst = <C <U ArrayMutator>>
                    }
                    fun = <U []>
                    block = nullptr
                    args = [
                      Send{
                        recv = ConstantLit{
                          orig = nullptr
                          symbol = ::T
                        }
                        fun = <U untyped>
                        block = nullptr
                        args = [
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Literal{ value = :"t_array" }

        Literal{ value = :"t_array=" }

        ClassDef{
          kind = class
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <C <U Mutator>>
          }<<C <U <todo sym>>>>
          ancestors = []
          rhs = [
            Literal{ value = :"t_array=" }

            Literal{ value = :"t_array" }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Local{
                      localVariable = <U <self>>
                    }
                    fun = <U params>
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = Send{
                              recv = UnresolvedConstantLit{
                                scope = UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <C <U T>>
                                }
                                cnst = <C <U Array>>
                              }
                              fun = <U []>
                              block = nullptr
                              args = [
                                UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <C <U String>>
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U T>>
                        }
                        cnst = <C <U Array>>
                      }
                      fun = <U []>
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U t_array=><<C <U <todo sym>>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }, BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U T>>
                      }
                      cnst = <C <U Array>>
                    }
                    fun = <U []>
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U String>>
                      }
                    ]
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                }
                                cnst = <C <U Chalk>>
                              }
                              cnst = <C <U ODM>>
                            }
                            cnst = <C <U Mutator>>
                          }
                          cnst = <C <U Private>>
                        }
                        cnst = <C <U ArrayMutator>>
                      }
                      fun = <U []>
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U t_array><<C <U <todo sym>>>>
              args = [BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                              }
                              cnst = <C <U Chalk>>
                            }
                            cnst = <C <U ODM>>
                          }
                          cnst = <C <U Mutator>>
                        }
                        cnst = <C <U Private>>
                      }
                      cnst = <C <U ArrayMutator>>
                    }
                    fun = <U []>
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U String>>
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Literal{ value = :"hash_of" }

        Literal{ value = :"hash_of=" }

        ClassDef{
          kind = class
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <C <U Mutator>>
          }<<C <U <todo sym>>>>
          ancestors = []
          rhs = [
            Literal{ value = :"hash_of=" }

            Literal{ value = :"hash_of" }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Local{
                      localVariable = <U <self>>
                    }
                    fun = <U params>
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = Send{
                              recv = UnresolvedConstantLit{
                                scope = UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <C <U T>>
                                }
                                cnst = <C <U Hash>>
                              }
                              fun = <U []>
                              block = nullptr
                              args = [
                                UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <C <U Symbol>>
                                }
                                UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <C <U String>>
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U T>>
                        }
                        cnst = <C <U Hash>>
                      }
                      fun = <U []>
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U Symbol>>
                        }
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U hash_of=><<C <U <todo sym>>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }, BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U T>>
                      }
                      cnst = <C <U Hash>>
                    }
                    fun = <U []>
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U Symbol>>
                      }
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U String>>
                      }
                    ]
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                }
                                cnst = <C <U Chalk>>
                              }
                              cnst = <C <U ODM>>
                            }
                            cnst = <C <U Mutator>>
                          }
                          cnst = <C <U Private>>
                        }
                        cnst = <C <U HashMutator>>
                      }
                      fun = <U []>
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U Symbol>>
                        }
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U hash_of><<C <U <todo sym>>>>
              args = [BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                              }
                              cnst = <C <U Chalk>>
                            }
                            cnst = <C <U ODM>>
                          }
                          cnst = <C <U Mutator>>
                        }
                        cnst = <C <U Private>>
                      }
                      cnst = <C <U HashMutator>>
                    }
                    fun = <U []>
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U Symbol>>
                      }
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U String>>
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Literal{ value = :"const_explicit" }

        Literal{ value = :"const" }

        Literal{ value = :"no_class_arg" }

        ClassDef{
          kind = class
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <C <U Mutator>>
          }<<C <U <todo sym>>>>
          ancestors = []
          rhs = [
            Literal{ value = :"no_class_arg=" }

            Literal{ value = :"no_class_arg" }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Local{
                      localVariable = <U <self>>
                    }
                    fun = <U params>
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U Array>>
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Array>>
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U no_class_arg=><<C <U <todo sym>>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }, BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U Array>>
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::T::Sig::WithoutRuntime
              }
              fun = <U sig>
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U returns>
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                }
                                cnst = <C <U Chalk>>
                              }
                              cnst = <C <U ODM>>
                            }
                            cnst = <C <U Mutator>>
                          }
                          cnst = <C <U Private>>
                        }
                        cnst = <C <U ArrayMutator>>
                      }
                      fun = <U []>
                      block = nullptr
                      args = [
                        Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = rewriter
              name = <U no_class_arg><<C <U <todo sym>>>>
              args = [BlockArg{ expr = UnresolvedIdent{
                  kind = Local
                  name = <U <blk>>
                } }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U cast>
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                    }
                    fun = <U unsafe>
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                              }
                              cnst = <C <U Chalk>>
                            }
                            cnst = <C <U ODM>>
                          }
                          cnst = <C <U Mutator>>
                        }
                        cnst = <C <U Private>>
                      }
                      cnst = <C <U ArrayMutator>>
                    }
                    fun = <U []>
                    block = nullptr
                    args = [
                      Send{
                        recv = ConstantLit{
                          orig = nullptr
                          symbol = ::T
                        }
                        fun = <U untyped>
                        block = nullptr
                        args = [
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Literal{ value = :"enum_prop" }

        Literal{ value = :"foreign" }

        Literal{ value = :"foreign=" }

        Literal{ value = :"foreign_" }

        Literal{ value = :"foreign_!" }

        Literal{ value = :"foreign_lazy" }

        Literal{ value = :"foreign_lazy=" }

        Literal{ value = :"foreign_lazy_" }

        Literal{ value = :"foreign_lazy_!" }

        Literal{ value = :"foreign_proc" }

        Literal{ value = :"foreign_proc=" }

        Literal{ value = :"foreign_proc_" }

        Literal{ value = :"foreign_proc_!" }

        Literal{ value = :"foreign_invalid" }

        Literal{ value = :"foreign_invalid=" }

        Literal{ value = :"foreign_invalid_" }

        Literal{ value = :"foreign_invalid_!" }

        Literal{ value = :"ifunset" }

        Literal{ value = :"ifunset=" }

        Literal{ value = :"ifunset_nilable" }

        Literal{ value = :"ifunset_nilable=" }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U default><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U default=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U t_nilable><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = UnresolvedConstantLit{
                            scope = EmptyTree
                            cnst = <C <U T>>
                          }
                          fun = <U nilable>
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U String>>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U t_nilable=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U type><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U type=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Object
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U object><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Object
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = ConstantLit{
                          orig = nullptr
                          symbol = ::Object
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Object
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U object=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Object
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Array>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U array><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U Array>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U Array>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Array>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U array=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U Array>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T::Array
                  }
                  fun = <U []>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U array_of><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T::Array
                }
                fun = <U []>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T::Array
                          }
                          fun = <U []>
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U String>>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T::Array
                  }
                  fun = <U []>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U array_of=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T::Array
                }
                fun = <U []>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Array>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U array_of_explicit><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U Array>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U Array>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Array>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U array_of_explicit=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U Array>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    cnst = <C <U Array>>
                  }
                  fun = <U []>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U t_array><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  cnst = <C <U Array>>
                }
                fun = <U []>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U T>>
                            }
                            cnst = <C <U Array>>
                          }
                          fun = <U []>
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U String>>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    cnst = <C <U Array>>
                  }
                  fun = <U []>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U t_array=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  cnst = <C <U Array>>
                }
                fun = <U []>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    cnst = <C <U Hash>>
                  }
                  fun = <U []>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Symbol>>
                    }
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U hash_of><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  cnst = <C <U Hash>>
                }
                fun = <U []>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U Symbol>>
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U T>>
                            }
                            cnst = <C <U Hash>>
                          }
                          fun = <U []>
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U Symbol>>
                            }
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U String>>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    cnst = <C <U Hash>>
                  }
                  fun = <U []>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Symbol>>
                    }
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U hash_of=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  cnst = <C <U Hash>>
                }
                fun = <U []>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U Symbol>>
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U const_explicit><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U const><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Array>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U no_class_arg><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U Array>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U untyped>
                  block = nullptr
                  args = [
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U enum_prop><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U ForeignClass>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_><<C <U <todo sym>>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U ForeignClass>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_!><<C <U <todo sym>>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_lazy><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_lazy=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U ForeignClass>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_lazy_><<C <U <todo sym>>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U ForeignClass>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_lazy_!><<C <U <todo sym>>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_proc><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_proc=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U ForeignClass>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_proc_><<C <U <todo sym>>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U ForeignClass>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_proc_!><<C <U <todo sym>>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_invalid><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_invalid=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U untyped>
                  block = nullptr
                  args = [
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_invalid_><<C <U <todo sym>>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U untyped>
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U untyped>
                  block = nullptr
                  args = [
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foreign_invalid_!><<C <U <todo sym>>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U unsafe>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U ifunset><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U String>>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U ifunset=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U ifunset_nilable><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = UnresolvedConstantLit{
                            scope = EmptyTree
                            cnst = <C <U T>>
                          }
                          fun = <U nilable>
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U String>>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U ifunset_nilable=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U PropHelpers>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        Literal{ value = :"token" }

        Literal{ value = :"token=" }

        Literal{ value = :"created" }

        Literal{ value = :"created=" }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U token><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = ConstantLit{
                          orig = nullptr
                          symbol = ::String
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U token=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Float
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U created><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Float
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = ConstantLit{
                          orig = nullptr
                          symbol = ::Float
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Float
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U created=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Float
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U PropHelpers2>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        Literal{ value = :"token" }

        Literal{ value = :"token=" }

        Literal{ value = :"created" }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U token><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = ConstantLit{
                          orig = nullptr
                          symbol = ::String
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U token=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Float
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U created><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Float
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U ShardingProp>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        Literal{ value = :"merchant" }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U merchant><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U EncryptedProp>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        Literal{ value = :"foo" }

        Literal{ value = :"encrypted_foo" }

        Literal{ value = :"foo=" }

        Literal{ value = :"encrypted_foo=" }

        Literal{ value = :"bar" }

        Literal{ value = :"encrypted_bar" }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = ::String
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foo><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  ConstantLit{
                    orig = nullptr
                    symbol = ::String
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <C <U Opus>>
                              }
                              cnst = <C <U DB>>
                            }
                            cnst = <C <U Model>>
                          }
                          cnst = <C <U Mixins>>
                        }
                        cnst = <C <U Encryptable>>
                      }
                      cnst = <C <U EncryptedValue>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U encrypted_foo><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U Opus>>
                            }
                            cnst = <C <U DB>>
                          }
                          cnst = <C <U Model>>
                        }
                        cnst = <C <U Mixins>>
                      }
                      cnst = <C <U Encryptable>>
                    }
                    cnst = <C <U EncryptedValue>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U nilable>
                          block = nullptr
                          args = [
                            ConstantLit{
                              orig = nullptr
                              symbol = ::String
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = ::String
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U foo=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  ConstantLit{
                    orig = nullptr
                    symbol = ::String
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                          }
                          fun = <U nilable>
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = UnresolvedConstantLit{
                                  scope = UnresolvedConstantLit{
                                    scope = UnresolvedConstantLit{
                                      scope = UnresolvedConstantLit{
                                        scope = EmptyTree
                                        cnst = <C <U Opus>>
                                      }
                                      cnst = <C <U DB>>
                                    }
                                    cnst = <C <U Model>>
                                  }
                                  cnst = <C <U Mixins>>
                                }
                                cnst = <C <U Encryptable>>
                              }
                              cnst = <C <U EncryptedValue>>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <C <U Opus>>
                              }
                              cnst = <C <U DB>>
                            }
                            cnst = <C <U Model>>
                          }
                          cnst = <C <U Mixins>>
                        }
                        cnst = <C <U Encryptable>>
                      }
                      cnst = <C <U EncryptedValue>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U encrypted_foo=><<C <U <todo sym>>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U Opus>>
                            }
                            cnst = <C <U DB>>
                          }
                          cnst = <C <U Model>>
                        }
                        cnst = <C <U Mixins>>
                      }
                      cnst = <C <U Encryptable>>
                    }
                    cnst = <C <U EncryptedValue>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = ::String
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U bar><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  ConstantLit{
                    orig = nullptr
                    symbol = ::String
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::T::Sig::WithoutRuntime
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U nilable>
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <C <U Opus>>
                              }
                              cnst = <C <U DB>>
                            }
                            cnst = <C <U Model>>
                          }
                          cnst = <C <U Mixins>>
                        }
                        cnst = <C <U Encryptable>>
                      }
                      cnst = <C <U EncryptedValue>>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = rewriter
          name = <U encrypted_bar><<C <U <todo sym>>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
            }
            fun = <U cast>
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U unsafe>
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                }
                fun = <U nilable>
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <C <U Opus>>
                            }
                            cnst = <C <U DB>>
                          }
                          cnst = <C <U Model>>
                        }
                        cnst = <C <U Mixins>>
                      }
                      cnst = <C <U Encryptable>>
                    }
                    cnst = <C <U EncryptedValue>>
                  }
                ]
              }
            ]
          }
        }
      ]
    }

    Literal{ value = :"main" }

    MethodDef{
      flags = 0
      name = <U main><<C <U <todo sym>>>>
      args = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U SomeODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U foo>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U SomeODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U foo=>
                block = nullptr
                args = [
                  Literal{ value = "b" }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U SomeODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U foo2>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U SomeODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U foo2=>
                block = nullptr
                args = [
                  Literal{ value = "b" }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U default>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U t_nilable>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U type>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U object>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U array>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U array_of>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U array_of_explicit>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U t_array>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U hash_of>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U const_explicit>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U const_explicit=>
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U const>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U const=>
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U no_class_arg>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U no_class_arg=>
            block = nullptr
            args = [
              Array{
                elems = [
                  Literal{ value = "b" }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U enum_prop>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U enum_prop=>
            block = nullptr
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U foreign_>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U foreign_!>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U foreign_lazy_>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U foreign_invalid_>
            block = nullptr
            args = [
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U PropHelpers>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U token>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U token=>
            block = nullptr
            args = [
              Literal{ value = "tok_token" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U token=>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U PropHelpers>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U created>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U created=>
            block = nullptr
            args = [
              Literal{ value = 0.000000 }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U created=>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U PropHelpers2>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U token>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers2>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U token=>
            block = nullptr
            args = [
              Literal{ value = "tok_token" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers2>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U token=>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U PropHelpers2>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U created>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers2>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U created=>
            block = nullptr
            args = [
              Literal{ value = 0.000000 }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U ShardingProp>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U merchant>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U ShardingProp>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U merchant=>
            block = nullptr
            args = [
              Literal{ value = "hi" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U EncryptedProp>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U foo>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U EncryptedProp>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U encrypted_foo>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U EncryptedProp>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U foo=>
            block = nullptr
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U EncryptedProp>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U foo=>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U EncryptedProp>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U bar=>
            block = nullptr
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U ifunset>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  args = [
                  ]
                }
                fun = <U ifunset_nilable>
                block = nullptr
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              args = [
              ]
            }
            fun = <U ifunset=>
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        ],
        expr = Send{
          recv = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U AdvancedODM>>
            }
            fun = <U new>
            block = nullptr
            args = [
            ]
          }
          fun = <U ifunset_nilable=>
          block = nullptr
          args = [
            Literal{ value = nil }
          ]
        }
      }
    }
  ]
}
