class <emptyTree><<C <root>>> < ()
  class <emptyTree>::<C Module><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C T>::<C Sig>)
  end

  class <emptyTree>::<C A><<C <todo sym>>> < (::<todo sym>)
    :"foo"

    def foo<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end
  end

  <emptyTree>::<C A>.new().foo()

  class <emptyTree>::<C B><<C <todo sym>>> < (::<todo sym>)
    :"bar"

    <self>.sig() do ||
      <self>.returns(<emptyTree>::<C Integer>)
    end

    def bar<<C <todo sym>>>(&<blk>)
      0
    end
  end

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C B>.new().bar())

  module <emptyTree>::<C M><<C <todo sym>>> < ()  end

  class <emptyTree>::<C C><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C M>)
  end

  <emptyTree>::<C T>.let(<emptyTree>::<C C>.new(), <emptyTree>::<C M>)

  class <emptyTree>::<C D><<C <todo sym>>> < (::<todo sym>)
    :"qux"

    <self>.sig() do ||
      <self>.void()
    end

    def self.qux<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end
  end

  <emptyTree>::<C D>.qux()

  module <emptyTree>::<C Top><<C <todo sym>>> < ()
    class <emptyTree>::<C Parent><<C <todo sym>>> < (::<todo sym>)    end
  end

  class <emptyTree>::<C E><<C <todo sym>>> < (<emptyTree>::<C Top>::<C Parent>)  end

  <emptyTree>::<C T>.let(<emptyTree>::<C E>.new(), <emptyTree>::<C Top>::<C Parent>)
end
